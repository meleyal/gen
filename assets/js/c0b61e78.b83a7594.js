"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[160],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),l=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return o.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(n),f=r,m=d["".concat(c,".").concat(f)]||d[f]||p[f]||a;return n?o.createElement(m,i(i({ref:t},u),{},{components:n})):o.createElement(m,i({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8139:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return u},default:function(){return d}});var o=n(3117),r=n(102),a=(n(7294),n(3905)),i=["components"],s={title:"Note"},c=void 0,l={unversionedId:"music/note",id:"music/note",title:"Note",description:"A good place to start is to understand how to create a musical note. This guide",source:"@site/docs/music/note.md",sourceDirName:"music",slug:"/music/note",permalink:"/generative-music-with-javascript/music/note",tags:[],version:"current",frontMatter:{title:"Note"}},u=[{value:"Synthesis",id:"synthesis",children:[],level:2}],p={toc:u};function d(e){var t=e.components,n=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"A good place to start is to understand how to create a musical note. This guide\ncovers how to generate a single note, first using synthesis, then using a\nsample."),(0,a.kt)("h2",{id:"synthesis"},"Synthesis"),(0,a.kt)("p",null,"The Web Audio API provides all the building blocks required to synthesise your\nown sounds by combining oscillators and effects. The easiest way to hear some\nnoise is to create an\n",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode"},(0,a.kt)("inlineCode",{parentName:"a"},"OscillatorNode")),"."),(0,a.kt)("p",null,"An oscillator can be tuned to (or oscillate at) a specific frequency. Musical\nnotes are just the names we've given to certain frequencies. If we know the\nfrequency of a note, we can set the oscillator to that frequency and it will\nproduce that note."),(0,a.kt)("p",null,"Here, we set the oscillator to 440 Hz, which is the frequency of the middle C\n(C4) note on a piano. The default oscillator type is ",(0,a.kt)("inlineCode",{parentName:"p"},"sine"),", so when running\nthis code we hear a pure sine wave tone at middle C."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const context = new AudioContext()\nconst osc = context.createOscillator()\nosc.frequency.value = 440\nosc.connect(context.destination)\nosc.start()\n")),(0,a.kt)("p",null,"With an understanding of sound synthesis you can generate an infinite range of\nsounds. As mentioned in the introduction, however, it's not the focus of this\nbook, so we won't delve much deeper into synthesis here."),(0,a.kt)("p",null,"##\xa0Sample"),(0,a.kt)("p",null,"Our focus is music composition, so rather than synthesising our own sounds,\nwe're instead going to delegate that work to pre-recorded instrument samples."),(0,a.kt)("p",null,"To play back samples we need a few elements:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A sample audio file: e.g.\n",(0,a.kt)("a",{parentName:"li",href:"https://unpkg.com/@meleyal/tuplet/samples/piano/c4.mp3"},"the middle C (C4) note played on a piano")),(0,a.kt)("li",{parentName:"ul"},"A way to load the audio file:\n",(0,a.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"},(0,a.kt)("inlineCode",{parentName:"a"},"fetch"))),(0,a.kt)("li",{parentName:"ul"},"A way to decode the audio file for playback:\n",(0,a.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/decodeAudioData"},(0,a.kt)("inlineCode",{parentName:"a"},"decodeAudioData"))),(0,a.kt)("li",{parentName:"ul"},"A place to store the decoded audio:\n",(0,a.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer"},(0,a.kt)("inlineCode",{parentName:"a"},"AudioBuffer"))),(0,a.kt)("li",{parentName:"ul"},"A way to play back the decoded audio:\n",(0,a.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode"},(0,a.kt)("inlineCode",{parentName:"a"},"AudioBufferSourceNode")))),(0,a.kt)("p",null,"With these, we can create something equivalent to the synthesised example above,\nbut this time using our pre-recorded sample. When running this code, we hear our\npiano sample play from start to finish."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// Create the Web Audio environment.\nconst context = new AudioContext()\n\n// Load a sample from the server.\nfetch('sample.mp3')\n  .then((response) => {\n    // Get the `arrayBuffer` representation of the sample.\n    return response.arrayBuffer()\n  })\n  .then((arrayBuffer) => {\n    // Decode the `arrayBuffer` into actual audio.\n    return context.decodeAudioData(arrayBuffer)\n  })\n  .then((audioBuffer) => {\n    // Create an `AudioBufferSourceNode`.\n    const sourceNode = context.createBufferSource()\n\n    // Assign the audio to its buffer.\n    sourceNode.buffer = audioBuffer\n\n    // Connect the `sourceNode` to the destination output (our speakers).\n    sourceNode.connect(context.destination)\n\n    // Start playback of the sample.\n    sourceNode.start()\n  })\n")),(0,a.kt)("p",null,"##\xa0Learning"),(0,a.kt)("p",null,"We now know the steps involved in loading a sample, decoding it, and playing it\nback. ",(0,a.kt)("strong",{parentName:"p"},"TODO")," includes the ",(0,a.kt)("inlineCode",{parentName:"p"},"sample()")," function which abstracts away some of\nthese details for us:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const { sample } = tuplet\n\n;(async () => {\n  const context = new AudioContext()\n  const s = await sample(context, 'sample.mp3')\n  s.connect(context.destination)\n  s.start()\n})()\n")))}d.isMDXComponent=!0}}]);