"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[547],{3905:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return f}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=r.createContext({}),l=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},m=function(e){var n=l(e.components);return r.createElement(p.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,m=c(e,["components","mdxType","originalType","parentName"]),u=l(t),f=i,d=u["".concat(p,".").concat(f)]||u[f]||s[f]||o;return t?r.createElement(d,a(a({ref:n},m),{},{components:t})):r.createElement(d,a({ref:n},m))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=u;var c={};for(var p in n)hasOwnProperty.call(n,p)&&(c[p]=n[p]);c.originalType=e,c.mdxType="string"==typeof e?e:i,a[1]=c;for(var l=2;l<o;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},5028:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return a},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return l},default:function(){return s}});var r=t(7462),i=t(3366),o=(t(7294),t(3905)),a={title:"Twinkle"},c=void 0,p={unversionedId:"examples/twinkle",id:"examples/twinkle",isDocsHomePage:!1,title:"Twinkle",description:"`js",source:"@site/book/examples/twinkle.md",sourceDirName:"examples",slug:"/examples/twinkle",permalink:"/generative-music-with-javascript/book/examples/twinkle",version:"current",frontMatter:{title:"Twinkle"}},l=[],m={toc:l};function s(e){var n=e.components,t=(0,i.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},";(async () => {\n  const { metronome, sampler, pattern, plugins } = tuplet\n  const { magenta } = plugins\n\n  TWINKLE_TWINKLE = {\n    notes: [\n      { pitch: 60, startTime: 0.0, endTime: 0.5 },\n      { pitch: 60, startTime: 0.5, endTime: 1.0 },\n      { pitch: 67, startTime: 1.0, endTime: 1.5 },\n      { pitch: 67, startTime: 1.5, endTime: 2.0 },\n      { pitch: 69, startTime: 2.0, endTime: 2.5 },\n      { pitch: 69, startTime: 2.5, endTime: 3.0 },\n      { pitch: 67, startTime: 3.0, endTime: 4.0 },\n      { pitch: 65, startTime: 4.0, endTime: 4.5 },\n      { pitch: 65, startTime: 4.5, endTime: 5.0 },\n      { pitch: 64, startTime: 5.0, endTime: 5.5 },\n      { pitch: 64, startTime: 5.5, endTime: 6.0 },\n      { pitch: 62, startTime: 6.0, endTime: 6.5 },\n      { pitch: 62, startTime: 6.5, endTime: 7.0 },\n      { pitch: 60, startTime: 7.0, endTime: 8.0 },\n    ],\n    totalTime: 8,\n  }\n\n  pattern.use(magenta)\n\n  const piano1 = await sampler('piano')\n  const piano2 = await sampler('piano')\n\n  const twinkle = await pattern.from(TWINKLE_TWINKLE)\n  const continued1 = await twinkle.continue({ loop: true })\n  const continued2 = await twinkle.continue({ loop: true })\n  // const combined = pattern.concat([twinkle, continued], { loop: true })\n  const metro = metronome({ bpm: 60 })\n\n  // console.log(melody.fold())\n\n  metro.on('tick', (time) => {\n    piano1.play(continued1.at(time))\n    piano2.play(continued2.at(time))\n  })\n\n  metro.start()\n})()\n")))}s.isMDXComponent=!0}}]);