"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[349],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(n),d=o,h=m["".concat(l,".").concat(d)]||m[d]||u[d]||a;return n?r.createElement(h,i(i({ref:t},p),{},{components:n})):r.createElement(h,i({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1502:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return c},default:function(){return u}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i={title:"Architecture"},s=void 0,l={unversionedId:"examples/architecture",id:"examples/architecture",isDocsHomePage:!1,title:"Architecture",description:"This chapter focuses on how to structure our programs. The goal is to provide",source:"@site/book/examples/architecture.md",sourceDirName:"examples",slug:"/examples/architecture",permalink:"/generative-music-with-javascript/book/examples/architecture",version:"current",frontMatter:{title:"Architecture"}},c=[{value:"Model",id:"model",children:[]},{value:"Messages",id:"messages",children:[]},{value:"Update",id:"update",children:[]},{value:"Render",id:"render",children:[]},{value:"Program",id:"program",children:[]}],p={toc:c};function u(e){var t=e.components,i=(0,o.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,r.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This chapter focuses on how to structure our programs. The goal is to provide\nsome minimal conventions for where to put things, so we can focus on the\ninteresting parts of our program."),(0,a.kt)("p",null,"This is not essential, you can certainly structure your program any way that\nmakes sense to you. What's offered here is one way to do it. Even if you don't\nadopt this pattern, it's worth skimming this chapter as the later examples in\nthe book use it."),(0,a.kt)("p",null,'The architecture presented here is based on the concept of "one-way data flow",\nand is borrowed from\n',(0,a.kt)("a",{parentName:"p",href:"https://guide.elm-lang.org/architecture/"},"The Elm Architecture"),". A ",(0,a.kt)("inlineCode",{parentName:"p"},"program"),"\ngenerates ",(0,a.kt)("inlineCode",{parentName:"p"},"messages")," which are sent to an ",(0,a.kt)("inlineCode",{parentName:"p"},"update")," function that updates a data\n",(0,a.kt)("inlineCode",{parentName:"p"},"model")," and passes it to a ",(0,a.kt)("inlineCode",{parentName:"p"},"render")," function. It's as simple as that!"),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(9516).Z})),(0,a.kt)("h2",{id:"model"},"Model"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"model"),' is an object that describes the state of our program. Here, we can\nthink about the "shape" of the data that our program will need. We can fill in\nknown values, and provide placeholders for data we need to wait for (e.g.\nsamples being loaded).'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const model = {\n  tick: 0,\n  bpm: 60,\n  samples: [],\n}\n")),(0,a.kt)("h2",{id:"messages"},"Messages"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"messages()")," function describes all the things we want to happen in our\nprogram. It receives the current ",(0,a.kt)("inlineCode",{parentName:"p"},"model"),", and a ",(0,a.kt)("inlineCode",{parentName:"p"},"send()")," function it can use to\nupdate the model. It returns an object describing the things we want to happen\nin our program."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const messages = (model, send) => {\n  return {\n    tick: () => {\n      setInterval(() => {\n        send({ tick: 1 })\n      }, 1000)\n    },\n  }\n}\n")),(0,a.kt)("p",null,"Messages can optionally call other messages:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const messages = (model, send) => {\n  const msgs =  {\n    tick: () => {\n      setInterval(() => {\n        const msg = { tick: 1, ...msgs.hello() }\n        send(msg)\n      }, 1000)\n    }\n\n    hello: () => {\n      return { hello: 'world' }\n    }\n  }\n\n  return msgs\n}\n")),(0,a.kt)("h2",{id:"update"},"Update"),(0,a.kt)("p",null,"If your update logic is more complicated, you can provide a custom ",(0,a.kt)("inlineCode",{parentName:"p"},"update()"),"\nfunction to ",(0,a.kt)("inlineCode",{parentName:"p"},"program()"),"."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"update()")," function receives the current ",(0,a.kt)("inlineCode",{parentName:"p"},"model"),', and a message (or\n"action") (',(0,a.kt)("inlineCode",{parentName:"p"},"msg"),'). It updates the model according to the message type and\nreturns it. While not enforced, you should think of the model as immutable. Each\ntime we update it we get back a new version or "snapshot" of the current model.\nThe benefits of immutable model will become more apparent later in the book.'),(0,a.kt)("p",null,"The default implementation just merges the message into the model using the key\nand value of the ",(0,a.kt)("inlineCode",{parentName:"p"},"msg"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const update = (model, msg) => {\n  return {\n    ...model,\n    ...msg,\n  }\n}\n\nupdate({ tick: 0 }, { tick: 1 }) // => { tick: 1 }\n")),(0,a.kt)("h2",{id:"render"},"Render"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"render()")," function is where we actually make sounds. It takes our model as\ninput, and the result is something that outputs audio to our speakers."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"TODO: Example")),(0,a.kt)("h2",{id:"program"},"Program"),(0,a.kt)("p",null,"These functions don't currently talk to each other, we still need a way to wire\nthem together."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"program()")," function takes care of calling ",(0,a.kt)("inlineCode",{parentName:"p"},"init()")," to build the initial\nmodel, sends ",(0,a.kt)("inlineCode",{parentName:"p"},"messages()")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"update()")," our model, and automatically calls\n",(0,a.kt)("inlineCode",{parentName:"p"},"render()")," with the updated model, forming a continuous feedback loop."),(0,a.kt)("p",null,"This example shows how to setup a metronome to continually update the model with\nthe current beat."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const { program, metronome, resolution } = tuplet\n\n// -- MODEL\n\nconst model = {\n  tick: 0\n}\n\n// -- MESSAGES\n\nconst messages = (model, send) => ({\n  const { context } = model\n\n  tick: () => {\n    const metro = resolution(metronome(context, 60), 4)\n\n    metro.subscribe(tick => {\n      send({ tick })\n    })\n  }\n})\n\n// -- RENDER\n\nconst render = model => {\n  console.log('render', model.tick)\n}\n\n// -- PROGRAM\n\nprogram({ model, messages, render })\n")))}u.isMDXComponent=!0},9516:function(e,t,n){t.Z=n.p+"assets/images/one-way-data-flow-91d14fed98327a888a77dbc3518cb3dc.svg"}}]);